#!/bin/env groovy

pipeline {
  agent none

  environment {
    IMAGE = "liatrio/petclinic-tomcat"
  }

  stages {
    stage('Build') {
      agent any
      steps {
        sh 'mvn clean install'
      }
    }
    stage('Code Scans') {
    	parallel {
    		stage('Sonar-Scan') {
      			agent any
      				steps {
        				//Leverage SonarQube Quality Gates for pipeline
					timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
   						 def qualityGate = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
    							if (qualityGate.status != 'OK') {
      								error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
    							}
 	 					}
        				sh 'sleep 4'
      					}
    		}
    		stage('Fortify-Scan') {
      			agent any
      				steps {
        				//Implement Gating with Fortify like the above example in SonarQube
        				sh 'sleep 4'
      				}
    		}
    	}
    }
    stage('Package') {
      agent any
      steps {
        script {
          if ( env.BRANCH_NAME == 'master' ) {
            pom = readMavenPom file: 'pom.xml'
            TAG = pom.version
          } else {
            TAG = env.BRANCH_NAME
          }
          sh "docker build -t ${env.IMAGE}:${TAG} ."
        }
      }
    }
    stage('Deploy to Dev') {
      agent any
      steps {
        sh 'docker rm -f petclinic-tomcat-temp || true'
        sh "docker run -d -p 9966:9966 --name petclinic-tomcat-temp ${env.IMAGE}:${TAG}"
      }
    }
    stage('Tests') {
        parallel {
    		stage('Smoke-Test Dev') {
      			agent any
      				steps {
        				//sample dummy step
        				sh 'sleep 4'
      				}
    		}
    		stage('Dev Performance Test') {
      			agent any
      				steps {
        				//sample dummy step
        				sh 'sleep 4'
      				}
    		}
	}
    }
  }
}
