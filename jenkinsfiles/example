#!/bin/env groovy 

pipeline {
  agent none

  environment {
    IMAGE = "liatrio/petclinic-tomcat"
  }

  stages {
    stage('Build') {
      agent any
      steps {
        sh 'mvn clean install'
      }
    }
    stage('Code Scans') {
    	parallel {
    		stage('Sonar-Scan') {
      			agent any
      				steps {
        				//Leverage SonarQube Quality Gates for pipeline
					//timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
   						// def qualityGate = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
    							//if (qualityGate.status != 'OK') {
      								//error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
    							//}
 	 					//}
        				sh 'sleep 2'
      					}
    		}
    		stage('Fortify-Scan') {
      			agent any
      				steps {
        				//Implement Gating with Fortify like the above example in SonarQube
        				sh 'sleep 4'
      				}
    		}
    	}
    }
    stage('Package') {
      agent any
      steps {
        script {
          if ( env.BRANCH_NAME == 'master' ) {
            pom = readMavenPom file: 'pom.xml'
            TAG = pom.version
          } else {
            TAG = env.BRANCH_NAME
          }
          sh "docker build -t ${env.IMAGE}:${TAG} ."
        }
      }
    }
    stage('Deploy to Dev') {
      agent any
      steps {
        sh 'docker rm -f petclinic-tomcat-temp || true'
        sh "docker run -d -p 9966:9966 --name petclinic-tomcat-temp ${env.IMAGE}:${TAG}"
      }
    }
    stage('DEV Tests') {
        parallel {
    		stage('Smoke-Test Dev') {
      			agent any
      				steps {
        				//Leverage Selenium test already in the project
					//sh "cd regression-suite && mvn clean -B test -DPETCLINIC_URL=https://dev.petclinic.liatr.io/petclinic"
        				//echo "Should be accessible at https://dev.petclinic.liatr.io/petclinic"
					sh 'sleep 10'
      				}			
    		}
    		stage('Dev Performance Test') {
      			agent any
      				steps {
        				//Run baseline jMeter or Blazemeter test
        				// def kpiMetrics = waitForKeyPerformanceIndicators() 
					//if (kpiMetrics.status != 'OK') {
      						//error "Pipeline aborted due to performance kpi failure: ${kpiMetrics.status}"
    					//}
					sh 'sleep 25'
      				}
    		}
		stage('Acceptance Tests') {
                        agent any
                                steps {
                                        //Trigger Acceptance Test from Epics, Featuers, User Stories
                                        //Variables can be passed in to the Jenkins job to specifiy scopt of tests
                                        sh 'sleep 10'
                                }
                }
	}
    }
  }
}
